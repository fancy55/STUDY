package com.study.designpattern;

/**
 * 使用设计模式的目的是为了可重用代码，提高代码的可扩展性和可维护性。
 * 设计模式这个术语是上个世纪90年代由Erich Gamma、Richard Helm、Raplh Johnson和Jonhn Vlissides四个人总结提炼出来的，并且写了一本Design Patterns的书。这四人也被称为四人帮（GoF）。
 * 为什么要使用设计模式？根本原因还是软件开发要实现可维护、可扩展，就必须尽量复用代码，并且降低代码的耦合度。设计模式主要是基于OOP编程提炼的，它基于以下几个原则：
 * 1、开闭原则：软件应该对扩展开放，而对修改关闭。这里的意思是在增加新功能的时候，能不改代码就尽量不要改，如果只增加代码就完成了新功能，那是最好的。
 * 2、里氏替换原则：这是一种面向对象的设计原则，即如果我们调用一个父类的方法可以成功，那么替换成子类调用也应该完全可以运行。
 * 设计模式把一些常用的设计思想提炼出一个个模式，然后给每个模式命名，这样在使用的时候更方便交流。GoF把23个常用模式分为创建型模式、结构型模式和行为型模式三类。
 * 创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。
     1、创建型模式包括：
     * 工厂方法：Factory Method
     * 抽象工厂：Abstract Factory
     * 建造者：Builder
     * 原型：Prototype
     * 单例：Singletons
 * 结构型模式主要涉及如何组合各种对象以便获得更好、更灵活的结构。虽然面向对象的继承机制提供了最基本的子类扩展父类的功能，但结构型模式不仅仅简单地使用继承，而更多地通过组合与运行期的动态组合来实现更灵活的功能。
     2、结构型模式有：
     * 适配器
     * 桥接
     * 组合
     * 装饰器
     * 外观
     * 享元
     * 代理
 *行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。
     3、 行为型模式有：
     * 责任链
     * 命令
     * 解释器
     * 迭代器
     * 中介
     * 备忘录
     * 观察者
     * 状态
     * 策略
     * 模板方法
     * 访问者
 */
public class design {
}
/**
 * JavaEE并不是一个软件产品，它更多的是一种软件架构和设计思想。我们可以把JavaEE看作是在JavaSE的基础上，开发的一系列基于服务器的组件、API标准和通用架构。
 * JavaEE最核心的组件就是基于Servlet标准的Web服务器，开发者编写的应用程序是基于Servlet API并运行在Web服务器内部的：
 *
 * JavaEE还有一系列技术标准：
 * EJB：Enterprise JavaBean，企业级JavaBean，早期经常用于实现应用程序的业务逻辑，现在基本被轻量级框架如Spring所取代；【使用最广泛的是Servlet和JMS，以及一系列开源组件。】
 * JAAS：Java Authentication and Authorization Service，一个标准的认证和授权服务，常用于企业内部，Web程序通常使用更轻量级的自定义认证；
 * JCA：JavaEE Connector Architecture，用于连接企业内部的EIS系统等；
 * JMS：Java Message Service，用于消息服务；
 * JTA：Java Transaction API，用于分布式事务；
 * JAX-WS：Java API for XML Web Services，用于构建基于XML的Web服务；
 *
 */
